{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1RrkogUVWqS8kfuiT5O9SW79TRBodyi3Q",
      "authorship_tag": "ABX9TyNlCLjkQ6hqIHOILyH9AJzm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/touilwalid/Pr-diction-des-ventes-de-produits/blob/main/Comparing%20Texts\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v5LOSJOH-MnA",
        "outputId": "e472ffb0-f3f1-4274-baff-5359e4a7ea0a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: spacy in /usr/local/lib/python3.10/dist-packages (3.7.5)\n",
            "Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.12)\n",
            "Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.5)\n",
            "Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.10)\n",
            "Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.8)\n",
            "Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.9)\n",
            "Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (8.2.5)\n",
            "Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.1.3)\n",
            "Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.4.8)\n",
            "Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.10)\n",
            "Requirement already satisfied: weasel<0.5.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.4.1)\n",
            "Requirement already satisfied: typer<1.0.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.12.3)\n",
            "Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (4.66.5)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.32.3)\n",
            "Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.8.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.1.4)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy) (71.0.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (24.1)\n",
            "Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.4.0)\n",
            "Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.26.4)\n",
            "Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy) (1.2.0)\n",
            "Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.20.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (2.20.1)\n",
            "Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2024.7.4)\n",
            "Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.7.11)\n",
            "Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.1.5)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (8.1.7)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (13.7.1)\n",
            "Requirement already satisfied: cloudpathlib<1.0.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy) (0.18.1)\n",
            "Requirement already satisfied: smart-open<8.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy) (7.0.4)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy) (2.1.5)\n",
            "Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy) (1.2.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (2.16.1)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open<8.0.0,>=5.2.1->weasel<0.5.0,>=0.1.0->spacy) (1.16.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (0.1.2)\n",
            "\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n",
            "You can now load the package via spacy.load('en_core_web_sm')\n",
            "\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n",
            "If you are in a Jupyter or Colab notebook, you may need to restart Python in\n",
            "order to load all the package's dependencies. You can do this by selecting the\n",
            "'Restart kernel' or 'Restart runtime' option.\n"
          ]
        }
      ],
      "source": [
        "!pip install spacy\n",
        "from spacy.cli import download\n",
        "download('en_core_web_sm')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fpath= \"/content/drive/MyDrive/CodingDojo/06-AdvancedML/Week21/Data/Fake_Real_News_Data.csv\"\n",
        "with open(fpath, encoding = \"utf-8\") as f:\n",
        "    txt = f.read()\n",
        "print(f\"There are {len(txt)} characters in the full text.\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RuDw_kNe-QqX",
        "outputId": "cbdf758a-a1c3-4ae8-dbb0-88dedd069b02"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 30363407 characters in the full text.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(fpath)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "oeVh9ftuGDk2",
        "outputId": "652508e7-d43e-4280-b51a-26eb458c1de1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0                                              title  \\\n",
              "0           0  A whirlwind day in D.C. showcases Trump’s unor...   \n",
              "1           1  In Baltimore's call for federal police probe, ...   \n",
              "2           2  Trump Proudly Declares: Most Of The People I’v...   \n",
              "3           3  Inside the Trump-Bush melodrama: Decades of te...   \n",
              "4           4      Shutdown clash to return in force by December   \n",
              "\n",
              "                                                text label  \n",
              "0  Donald Trump endorsed an unabashedly noninterv...  REAL  \n",
              "1  While some Justice Department investigations a...  REAL  \n",
              "2  Trump Proudly Declares: Most Of The People I’v...  FAKE  \n",
              "3  Donald Trump spent a day in January 2014 hobno...  REAL  \n",
              "4  Notable names include Ray Washburne (Commerce)...  REAL  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-abe63a0d-c788-473b-b11c-ac6b1e7a10d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>title</th>\n",
              "      <th>text</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>A whirlwind day in D.C. showcases Trump’s unor...</td>\n",
              "      <td>Donald Trump endorsed an unabashedly noninterv...</td>\n",
              "      <td>REAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>In Baltimore's call for federal police probe, ...</td>\n",
              "      <td>While some Justice Department investigations a...</td>\n",
              "      <td>REAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Trump Proudly Declares: Most Of The People I’v...</td>\n",
              "      <td>Trump Proudly Declares: Most Of The People I’v...</td>\n",
              "      <td>FAKE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Inside the Trump-Bush melodrama: Decades of te...</td>\n",
              "      <td>Donald Trump spent a day in January 2014 hobno...</td>\n",
              "      <td>REAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Shutdown clash to return in force by December</td>\n",
              "      <td>Notable names include Ray Washburne (Commerce)...</td>\n",
              "      <td>REAL</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abe63a0d-c788-473b-b11c-ac6b1e7a10d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-abe63a0d-c788-473b-b11c-ac6b1e7a10d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-abe63a0d-c788-473b-b11c-ac6b1e7a10d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-36ded961-d711-453e-85ba-f94d48ed1a55\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36ded961-d711-453e-85ba-f94d48ed1a55')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-36ded961-d711-453e-85ba-f94d48ed1a55 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6335,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1828,\n        \"min\": 0,\n        \"max\": 6334,\n        \"num_unique_values\": 6335,\n        \"samples\": [\n          1357,\n          2080,\n          2718\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6256,\n        \"samples\": [\n          \"New Wikileaks emails: Bernie is a Jerk, Megyn Kelly a Bimbo and More\",\n          \"Poll: Clinton's Lead Over Trump Slips After Florida Shooting\",\n          \"Obama\\u2019s trip to Ethiopia alarms some human rights activists\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6060,\n        \"samples\": [\n          \"  \\nThe election was set up to be stolen from Trump. That was the purpose of the polls rigged by overweighting Hillary supporters in the samples. After weeks of hearing poll results that Hillary was in the lead, the public would discount a theft claim. Electronic voting makes elections easy to steal, and I have posted explanations by election fraud experts of how it is done. \\nClearly the Oligarchy does not want Donald Trump in the White House as they are unsure that they could control him, and Hillary is their agent. \\nWith the reopening of the FBI investigation of Hillary and related scandals exploding all around her, election theft is not only more risky but also less likely to serve the Oligarchy\\u2019s own interests. \\nImage as well as money is part of Oligarchic power. The image of America takes a big hit if the American people elect a president who is currently under felony investigation. \\nMoreover, a President Hillary would be under investigation for years. With so much spotlight on her, she would not be able to serve the Oligarchy\\u2019s interests. She would be worthless to them, and, indeed, investigations that unearthed various connections between Hillary and oligarchs could damage the oligarchs. \\nIn other words, for the Oligarchy Hillary has moved from an asset to a liability. \\nA Hillary presidency could put our country into chaos. I doubt the oligarchs are sufficiently stupid to think that once she is sworn in, Hillary can fire FBI Director Comey and shut down the investigation. The last president that tried that was Richard Nixon, and look where that got him. \\nMoreover, the Republicans in the House and Senate would not stand for it. House Committee on oversight and Government Reform chairman Jason Chaffetz has already declared Hillary to be \\u201ca target-rich environment. Even before we get to day one, we\\u2019ve got two years worth of material already lined up.\\u201d House Speaker Paul Ryan said investigation will follow the evidence. \\nIf you were an oligarch, would you want your agent under this kind of scrutiny? If you were Hillary, would you want to be under this kind of pressure? \\nWhat happens if the FBI recommends the indictment of the president? Even insouciant Americans would see the cover-up if the attorney general refused to prosecute the case. Americans would lose all confidence in the government. Chaos would rule. Chaos can be revolutionary, and that is not good for oligarchs. \\nMoreover, if reports can be believed, salacious scandals appear to be waiting their time on stage. For example, last May Fox News reported: \\n\\u201cFormer President Bill Clinton was a much more frequent flyer on a registered sex offender\\u2019s infamous jet than previously reported, with flight logs showing the former president taking at least 26 trips aboard the \\u201cLolita Express\\u201d \\u2014 even apparently ditching his Secret Service detail for at least five of the flights, according to records obtained by FoxNews.com. \\n\\u201cClinton\\u2019s presence aboard Jeffrey Epstein\\u2019s Boeing 727 on 11 occasions has been reported, but flight logs show the number is more than double that, and trips between 2001 and 2003 included extended junkets around the world with Epstein and fellow passengers identified on manifests by their initials or first names, including \\u201cTatiana.\\u201d The tricked-out jet earned its Nabakov-inspired nickname because it was reportedly outfitted with a bed where passengers had group sex with young girls.\\u201d \\nFox News reports that Epstein served time in prison for \\u201csolicitation and procurement of minors for prostitution. He allegedly had a team of traffickers who procured girls as young as 12 to service his friends on \\u2018Orgy Island,\\u2019 an estate on Epstein\\u2019s 72-acre island, called Little St. James, in the U.S. Virgin Islands.\\u201d http://www.foxnews.com/us/2016/05/13/flight-logs-show-bill-clinton-flew-on-sex-offenders-jet-much-more-than-previously-known.html Some Internet sites, the credibility of which is unknown to me, have linked Hillary to these flights. http://truepundit.com/breaking-bombshell-nypd-blows-whistle-on-new-hillary-emails-money-laundering-sex-crimes-with-children-child-exploitation-pay-to-play-perjury/ \\nThis kind of behavior seems reckless even for Bill and Hillary, who are accustomed to getting away with everything. Nevertheless, if you are an oligarch already worried about the reopened Hillary email case and additional FBI investigations, such as the one into the Clinton Foundation, and concerned about what else might emerge from the 650,000 emails on former US Rep. Weiner\\u2019s computer and the NYPD pedophile investigation, putting Hillary in the Oval Office doesn\\u2019t look like a good decision. \\nAt this point, I would think that the Oligarchy would prefer to steal the election for Trump, instead of from him, rather than allow insouciant Americans to destroy America\\u2019s reputation by choosing a person under felony investigations for president of the United States. \\nBeing the \\u201cexceptional nation\\u201d takes on new meaning when there is a criminal at the helm. (Reprinted from PaulCraigRoberts.org by permission of author or representative)\",\n          \"Kentucky Sen. Rand Paul is suspending his campaign for president after a disappointing finish in Iowa, turning his focus now to his Senate re-election bid.\\n\\n\\\"Across the country thousands upon thousands of young people flocked to our message of limited government, privacy, criminal justice reform and a reasonable foreign policy. Brushfires of Liberty were ignited, and those will carry on, as will I,\\\" the Republican said in a statement.\\n\\n\\\"Although, today I will suspend my campaign for President, the fight is far from over,\\\" he continued. \\\"I will continue to carry the torch for Liberty in the United States Senate and I look forward to earning the privilege to represent the people of Kentucky for another term.\\\"\\n\\nThe libertarian-leaning senator finished a distant fifth in the Hawkeye State on Monday evening, unable to replicate the strong coalition that his father, former Texas Rep. Ron Paul, had built there four years ago.\\n\\nHis prospects were similarly bleak both in national polling and in New Hampshire, which is up next Tuesday. Left off the main debate stage last month for his poor standing in surveys (he instead boycotted the so-called undercard debate), Paul faced being passed over again at Saturday's GOP debate.\\n\\nHis end-of-the-year campaign finance report showed a depleted bank account, too, with just $1.3 million remaining.\\n\\nAnd Paul, unlike his rivals, had another campaign he was running simultaneously to worry about \\u2014 his Senate re-election bid. Though the first-term senator starts with the advantage in the GOP-leaning state, he drew a strong Democratic challenger last month in Lexington Mayor Jim Gray.\\n\\nPaul had to jump through hoops just to be able to run for both Senate and president at the same time. Last year he persuaded the state party to hold a March caucus instead of a May primary so he could legally be on both ballots. That political insurance policy he won't need anymore was costly \\u2014 he had promised he would pay for the change, which could be upwards of $500,000.\",\n          \"On Sunday during an appearance on \\\"Face the Nation\\\" on CBS, Speaker John Boehner (R-Ohio) tried to downplay the differences between the GOP leadership and the conservative rank and file in the House.\\n\\n\\\"We do have some members who disagree, from time to time, over the tactics that we decide to employ,\\\" Boehner said at one point. \\\"We get in an argument over tactics from time to time,\\\" \\u00a0he said at another. \\\"The goals are all the same.\\\"\\u00a0That line was echoed by House Majority Whip Kevin McCarthy (R-Calif.) during an interview with Chuck Todd on NBC's \\\"Meet the Press.\\\"\\u00a0\\\"We have a difference of opinion in strategy and tactics, but in principle we are united,\\\" McCarthy said.\\n\\nThose statements are only half true.\\n\\nThe true part is that Boehner, McCarthy and the rest of the House GOP leadership team do have a broad strategy and a series of tactics they try to employ to both accomplish their legislative goals and pressure President Obama. Whether that's \\\"Plan B,\\\" Boehner's attempt to avert the fiscal cliff while simultaneously forcing Obama's hand, or the latest attempt to extend funding for the Department of Homeland Security for three weeks, Boehner, McCarthy and the rest have a strategy behind most of these big legislative fights. (The lack of a back-up plan, on the other hand, is a little odd.)\\n\\nThe untrue part is that the rump Republican resistance \\u2014\\u00a0led by a handful of tea party-aligned conservatives \\u2014\\u00a0has its own alternative strategy or even tactics. Think back to the vote for speaker earlier in this Congress. \\u00a0The establishment had a plan to get Boehner reelected to the House's top job. The resistance? Not so much. They nominated three alternatives to Boehner \\u2014\\u00a0Dan Webster of Florida, Ted Yoho of Florida and Louie Gohmert of Texas \\u2014\\u00a0ensuring that the anti-Boehner vote was splintered. What did that reveal? That even in making a purely protest vote, there wasn't a whole heck of a lot strategy going on in the not-Boehner crowd.\\n\\nFast forward to Friday's vote on the three-week extension backed by Boehner. Yes, the conservative coalition in the House was absolutely the key to killing that measure. But to what end? What is the broader strategy of voting that extension down? The answer that group will give you is to tie the repeal of Obama's immigration executive orders to funding DHS. But that is never going to happen. Even if Senate Democrats allowed a vote on such a joined package and it passed, which wouldn't happen, Obama would veto it without a second thought. And we would be right back where we started.\\n\\nThis is a classic letting-the-perfect-get-in-the-way-of-the-good approach. It is neither a strategy nor a tactic to say \\\"we will get everything we want or there will be no deal.\\\" Saying \\\"no\\\" isn't a strategy. Jeb Bush addressed that reality during his question-and-answer session at CPAC last week. \\\"It's good to oppose bad things,\\\" Bush said. \\\"We need to start being for things.\\\"\\n\\nThat's what Boehner \\u2014\\u00a0and Senate Majority Leader Mitch McConnell (R-Ky.) \\u2014\\u00a0have been saying for quite some time. The problem for Boehner and, to a lesser extent, McConnell, is that they are not dealing with a group of members who see the world as they do. While Boehner et al are trying to draw up a broad strategy of how to approach the final two years of Obama's presidency, the resisters in the House are taking it issue by issue \\u2014\\u00a0and always standing on ideological ground to oppose Obama.\\n\\nOpposition without a plan of what to do next is neither a tactic nor a strategy. That's why John Boehner may have the most difficult job of any speaker in modern history.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"FAKE\",\n          \"REAL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop_duplicates()\n",
        "df = df.drop(columns=['Unnamed: 0'])\n",
        "print(df.head())\n",
        "print(f\"Number of rows after cleaning: {len(df)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wHToSVEIKUnD",
        "outputId": "f868f1c9-6ea4-4251-f857-37fbe7a9fb4c"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                               title  \\\n",
            "0  A whirlwind day in D.C. showcases Trump’s unor...   \n",
            "1  In Baltimore's call for federal police probe, ...   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...   \n",
            "3  Inside the Trump-Bush melodrama: Decades of te...   \n",
            "4      Shutdown clash to return in force by December   \n",
            "\n",
            "                                                text label  \n",
            "0  Donald Trump endorsed an unabashedly noninterv...  REAL  \n",
            "1  While some Justice Department investigations a...  REAL  \n",
            "2  Trump Proudly Declares: Most Of The People I’v...  FAKE  \n",
            "3  Donald Trump spent a day in January 2014 hobno...  REAL  \n",
            "4  Notable names include Ray Washburne (Commerce)...  REAL  \n",
            "Number of rows after cleaning: 6335\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "from nltk.tokenize import word_tokenize\n",
        "nltk.download('punkt')\n",
        "df['Tokenized Texts'] = df['text'].apply(lambda x: word_tokenize(x))\n",
        "print(df.head())\n",
        "print(f\"Number of rows: {len(df)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ffJviMIKn-n",
        "outputId": "14f78d29-33ae-47b2-d027-49c1e1e8bb03"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                               title  \\\n",
            "0  A whirlwind day in D.C. showcases Trump’s unor...   \n",
            "1  In Baltimore's call for federal police probe, ...   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...   \n",
            "3  Inside the Trump-Bush melodrama: Decades of te...   \n",
            "4      Shutdown clash to return in force by December   \n",
            "\n",
            "                                                text label  \\\n",
            "0  Donald Trump endorsed an unabashedly noninterv...  REAL   \n",
            "1  While some Justice Department investigations a...  REAL   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...  FAKE   \n",
            "3  Donald Trump spent a day in January 2014 hobno...  REAL   \n",
            "4  Notable names include Ray Washburne (Commerce)...  REAL   \n",
            "\n",
            "                                     Tokenized Texts  \n",
            "0  [Donald, Trump, endorsed, an, unabashedly, non...  \n",
            "1  [While, some, Justice, Department, investigati...  \n",
            "2  [Trump, Proudly, Declares, :, Most, Of, The, P...  \n",
            "3  [Donald, Trump, spent, a, day, in, January, 20...  \n",
            "4  [Notable, names, include, Ray, Washburne, (, C...  \n",
            "Number of rows: 6335\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import spacy\n",
        "nlp = spacy.load('en_core_web_sm', disable=['parser', 'ner'])\n",
        "def preprocess_text(text):\n",
        "    doc = nlp(text)\n",
        "    return [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]\n",
        "df['Lemmatized Texts'] = df['text'].apply(preprocess_text)\n",
        "print(df.head())\n",
        "print(f\"Number of rows: {len(df)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g-sHznXwK89Z",
        "outputId": "4e4c0b99-911a-4417-fbea-3d9e598686ed"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                               title  \\\n",
            "0  A whirlwind day in D.C. showcases Trump’s unor...   \n",
            "1  In Baltimore's call for federal police probe, ...   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...   \n",
            "3  Inside the Trump-Bush melodrama: Decades of te...   \n",
            "4      Shutdown clash to return in force by December   \n",
            "\n",
            "                                                text label  \\\n",
            "0  Donald Trump endorsed an unabashedly noninterv...  REAL   \n",
            "1  While some Justice Department investigations a...  REAL   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...  FAKE   \n",
            "3  Donald Trump spent a day in January 2014 hobno...  REAL   \n",
            "4  Notable names include Ray Washburne (Commerce)...  REAL   \n",
            "\n",
            "                                     Tokenized Texts  \\\n",
            "0  [Donald, Trump, endorsed, an, unabashedly, non...   \n",
            "1  [While, some, Justice, Department, investigati...   \n",
            "2  [Trump, Proudly, Declares, :, Most, Of, The, P...   \n",
            "3  [Donald, Trump, spent, a, day, in, January, 20...   \n",
            "4  [Notable, names, include, Ray, Washburne, (, C...   \n",
            "\n",
            "                                    Lemmatized Texts  \n",
            "0  [Donald, Trump, endorse, unabashedly, noninter...  \n",
            "1  [Justice, Department, investigation, adversari...  \n",
            "2  [Trump, Proudly, declare, People, insult, Dese...  \n",
            "3  [Donald, Trump, spend, day, January, 2014, hob...  \n",
            "4  [notable, name, include, Ray, Washburne, Comme...  \n",
            "Number of rows: 6335\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_text(text):\n",
        "    doc = nlp(text)\n",
        "    lemmatized_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]\n",
        "    return ' '.join(lemmatized_tokens)\n",
        "df['Lemmatized Texts'] = df['text'].apply(preprocess_text)\n",
        "print(df.head())\n",
        "print(f\"Number of rows: {len(df)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mmd-_MU3Li-n",
        "outputId": "42f07ad1-e2f6-48a3-f8b1-759ba12996a4"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                               title  \\\n",
            "0  A whirlwind day in D.C. showcases Trump’s unor...   \n",
            "1  In Baltimore's call for federal police probe, ...   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...   \n",
            "3  Inside the Trump-Bush melodrama: Decades of te...   \n",
            "4      Shutdown clash to return in force by December   \n",
            "\n",
            "                                                text label  \\\n",
            "0  Donald Trump endorsed an unabashedly noninterv...  REAL   \n",
            "1  While some Justice Department investigations a...  REAL   \n",
            "2  Trump Proudly Declares: Most Of The People I’v...  FAKE   \n",
            "3  Donald Trump spent a day in January 2014 hobno...  REAL   \n",
            "4  Notable names include Ray Washburne (Commerce)...  REAL   \n",
            "\n",
            "                                     Tokenized Texts  \\\n",
            "0  [Donald, Trump, endorsed, an, unabashedly, non...   \n",
            "1  [While, some, Justice, Department, investigati...   \n",
            "2  [Trump, Proudly, Declares, :, Most, Of, The, P...   \n",
            "3  [Donald, Trump, spent, a, day, in, January, 20...   \n",
            "4  [Notable, names, include, Ray, Washburne, (, C...   \n",
            "\n",
            "                                    Lemmatized Texts  \n",
            "0  Donald Trump endorse unabashedly noninterventi...  \n",
            "1  Justice Department investigation adversarial n...  \n",
            "2  Trump Proudly declare People insult Deserved A...  \n",
            "3  Donald Trump spend day January 2014 hobnob pol...  \n",
            "4  notable name include Ray Washburne Commerce Da...  \n",
            "Number of rows: 6335\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Word Count'] = df['Lemmatized Texts'].apply(lambda x: len(x.split()))\n",
        "class_balance = df['label'].value_counts()\n",
        "real_count = class_balance.get('REAL', 0)\n",
        "fake_count = class_balance.get('FAKE', 0)\n",
        "avg_word_count_real = df[df['label'] == 'REAL']['Word Count'].mean()\n",
        "avg_word_count_fake = df[df['label'] == 'FAKE']['Word Count'].mean()\n",
        "print(f\"Class Balance:\")\n",
        "print(f\"REAL articles: {real_count}\")\n",
        "print(f\"FAKE articles: {fake_count}\")\n",
        "print()\n",
        "print(f\"Average Word Count:\")\n",
        "print(f\"REAL articles: {avg_word_count_real:.2f}\")\n",
        "print(f\"FAKE articles: {avg_word_count_fake:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qJZly5RnNRXu",
        "outputId": "f7e1acee-63cb-4cf5-8f0d-5f67b00ce4da"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class Balance:\n",
            "REAL articles: 3171\n",
            "FAKE articles: 3164\n",
            "\n",
            "Average Word Count:\n",
            "REAL articles: 452.68\n",
            "FAKE articles: 350.53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from collections import Counter\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from wordcloud import WordCloud\n",
        "def get_most_common_words(text_series):\n",
        "    all_words = ' '.join(text_series)\n",
        "    tokens = all_words.split()\n",
        "    word_freq = Counter(tokens)\n",
        "    return word_freq.most_common(20)\n",
        "real_words = get_most_common_words(df[df['label'] == 'REAL']['Lemmatized Texts'])\n",
        "fake_words = get_most_common_words(df[df['label'] == 'FAKE']['Lemmatized Texts'])\n",
        "real_words_df = pd.DataFrame(real_words, columns=['Word', 'Frequency'])\n",
        "fake_words_df = pd.DataFrame(fake_words, columns=['Word', 'Frequency'])\n",
        "plt.figure(figsize=(14, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.barplot(x='Frequency', y='Word', data=real_words_df, palette='viridis')\n",
        "plt.title('Top 20 Most Common Words in REAL News')\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.barplot(x='Frequency', y='Word', data=fake_words_df, palette='viridis')\n",
        "plt.title('Top 20 Most Common Words in FAKE News')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "xWf2luUBNVr2",
        "outputId": "9bb297c8-82e5-4bf1-e679-9fc406ec1fd7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-08040ebe1b77>:19: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Frequency', y='Word', data=real_words_df, palette='viridis')\n",
            "<ipython-input-9-08040ebe1b77>:22: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Frequency', y='Word', data=fake_words_df, palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}